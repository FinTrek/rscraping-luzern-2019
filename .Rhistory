}
prep.to.send = function(choice.arrow){
return(paste(choice.arrow,"_arrow",sep = ""))
}
send.func = function(prepped.choice){
remDr$sendKeysToActiveElement(list(key = prepped.choice))
}
comb.move = function(arrow){
return(send.func(prep.to.send(arrow)))
}
#### Section III: functions to determine properties of boards ####
tiles.in.fourth = function(board){
sum(!is.na(board[,4]))
}
tot.sum.in.fourth = function(board){
sum(board[,4],na.rm = TRUE)
}
bottom.right.val = function(board){
return(sum(board[4,4],na.rm = TRUE))
}
bottom.right.third.val = function(board){
return(sum(board[3,4],na.rm = TRUE))
}
bottom.right.sec.val = function(board){
return(sum(board[2,4],na.rm = TRUE))
}
bottom.right.first.val = function(board){
return(sum(board[1,4],na.rm = TRUE))
}
prep.for.next = function(board){
sum(board[,3] == board[,4],na.rm = TRUE)
}
prep.for.next.third = function(board){
sum(board[,2] == board[,3],na.rm = TRUE)
}
prep.for.next.second = function(board){
sum(board[,1] == board[,2],na.rm = TRUE)
}
#### SECTION IV: scoring boards ####
top.val.moves = function(score.vec){
raw.scores = score.vec
temp.max = max(raw.scores)
indx = which(raw.scores == temp.max)
maxima = names(raw.scores)[indx]
return(maxima)
}
score.em = function(legal.board, FUN){
return(unlist(lapply(legal.board,FUN)))
}
#### SECTION V: algorithm for a single play ####
play.func = function(parsed){
legal.boards = legal.sub(parsed)
bottom.right = score.em(legal.boards, bottom.right.val)
leftover.moves = top.val.moves(bottom.right)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.third = score.em(leftover.boards, bottom.right.third.val)
leftover.moves = top.val.moves(bottom.right.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.sec = score.em(leftover.boards, bottom.right.sec.val)
leftover.moves = top.val.moves(bottom.right.sec)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tot.fourth.scores = score.em(leftover.boards, tot.sum.in.fourth)
leftover.moves = top.val.moves(tot.fourth.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores = score.em(leftover.boards, prep.for.next)
leftover.moves = top.val.moves(prep.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tile.tots = score.em(leftover.boards, function(x){20 - count.tiles(x)})
leftover.moves = top.val.moves(tile.tots)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.third = score.em(leftover.boards, prep.for.next.third)
leftover.moves = top.val.moves(prep.scores.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.second = score.em(leftover.boards, prep.for.next.second)
leftover.moves = top.val.moves(prep.scores.second)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
rand.choice = leftover.moves[sample(1:length(leftover.boards),1)]
return(comb.move(rand.choice))
}
execute = function(){
temp = read_html(remDr$getPageSource()[[1]])
play.func(temp)
}
grand.play = function(){
remDr$navigate("http://gabrielecirulli.github.io/2048/")
temp2 = rep("Continue",2)
while(temp2[2] != "Game over!"){
temp = read_html(remDr$getPageSource()[[1]])
execute()
temp2 = html_nodes(temp, xpath = "//p") %>% html_text()
curr.score = as.numeric(strsplit(html_text(html_nodes(temp, xpath = "//div[@class='score-container']")),split = "\\+")[[1]][1])
}
return(curr.score)
}
# example:
grand.play()
#### SECTION II: functions for predicting board states ####
# functions to determine current board state:
pos.strip = function(string){
first.cut = str_split(string, split = " tile-position-")[[1]]
val.sub = as.numeric(str_split(first.cut[1],split = "-")[[1]][2])
pos.sub = first.cut[2]
second.cut = str_split(pos.sub,split = " ")[[1]][1]
third.cut = str_split(second.cut, split = "-")[[1]]
conv.to.num = as.numeric(third.cut)
rev.order = rev(conv.to.num)
out = c(rev.order,val.sub)
return(out)
}
conv.to.frame = function(htmlParsedPage){
n1 = html_nodes(htmlParsedPage, xpath = "//div[@class='tile-container']") %>% html_text()
n2 = html_nodes(htmlParsedPage, xpath = "//div[@class='tile-container']//@class")
n2 = n2[-1]
curr.len = length(n2)
n2 = n2[which((1:curr.len %% 2) == 1)]
mat = t(sapply(n2,pos.strip))
rownames(mat) = 1:nrow(mat)
colnames(mat) = c("x","y","val")
mat = data.frame(mat)
empty.frame = matrix(rep(NA,16),nrow = 4)
for(i in 1:nrow(mat)){
empty.frame[mat$x[i],mat$y[i]] = mat$val[i]
}
return(empty.frame)
}
## predicting next board state:
comb.func = function(vec){
empty.vec = rep(NA,4)
four.three = as.numeric(sum(vec[4] == vec[3],na.rm = TRUE))
three.two = as.numeric(sum(vec[3] == vec[2],na.rm = TRUE))
two.one = as.numeric(sum(vec[2] == vec[1],na.rm = TRUE))
layout.vec = c(two.one,three.two,four.three)
if(all(layout.vec == c(1,1,1))){
empty.vec[3] = 2*vec[2]
empty.vec[4] = 2*vec[4]
}
if(all(layout.vec == c(0,0,1))){
empty.vec[4] = 2*vec[4]
empty.vec[1:3] = c(NA,vec[1:2])
}
if(all(layout.vec == c(0,1,0))){
empty.vec[3] = 2*vec[3]
empty.vec[2] = vec[1]
empty.vec[4] = vec[4]
}
if(all(layout.vec == c(1,0,0))){
empty.vec[2] = 2*vec[2]
empty.vec[3:4] = vec[3:4]
}
if(all(layout.vec == c(0,1,1))){
empty.vec[4] = 2*vec[4]
empty.vec[1:3] = c(NA,vec[1:2])
}
if(all(layout.vec == c(1,0,1))){
empty.vec[3] = 2*vec[2]
empty.vec[4] = 2*vec[4]
}
if(all(layout.vec == c(1,1,0))){
empty.vec[3] = 2*vec[3]
empty.vec[2] = vec[1]
empty.vec[4] = vec[4]
}
if(all(layout.vec == c(0,0,0))){
empty.vec = vec
}
return(empty.vec)
}
collect.right = function(board){
first.move = t(apply(board,1,function(x){
n.na = sum(is.na(x))
stripped = x[!is.na(x)]
comb = c(rep(NA,n.na),stripped)
return(comb)
}))
second.move = t(apply(first.move,1,comb.func))
return(second.move)
}
ninety.rot = function(mat){
empty = matrix(rep(NA,16),nrow = 4)
empty[1,] = mat[,4]
empty[2,] = mat[,3]
empty[3,] = mat[,2]
empty[4,] = mat[,1]
return(empty)
}
collect.down = function(board){
temp.turn = ninety.rot(board)
collapse = collect.right(temp.turn)
turn.back = ninety.rot(ninety.rot(ninety.rot(collapse)))
return(turn.back)
}
collect.up = function(board){
temp.turn = ninety.rot(ninety.rot(ninety.rot(board)))
collapse = collect.right(temp.turn)
turn.back = ninety.rot(collapse)
return(turn.back)
}
collect.left = function(board){
temp.turn = ninety.rot(ninety.rot(board))
collapse = collect.right(temp.turn)
turn.back = ninety.rot(ninety.rot(collapse))
return(turn.back)
}
count.tiles = function(board){
sum(!is.na(board))
}
preds.lst = function(Parsed){
board.temp = conv.to.frame(Parsed)
preds = list(orig = board.temp,
left = collect.left(board.temp),
right = collect.right(board.temp),
up = collect.up(board.temp),
down = collect.down(board.temp))
return(preds)
}
allowed.func = function(lst){
# note: this is a function of the output from preds.lst
# returns the directions that are currently allowed.
vals = unlist(lapply(lst[2:5],function(x){identical(x,lst[[1]])}))
sub = names(vals)[which(vals == F)]
return(sub)
}
legal.sub = function(Parsed){
preds = preds.lst(Parsed)
moves = allowed.func(preds)
out = preds[names(preds) %in% moves]
return(out)
}
prep.to.send = function(choice.arrow){
return(paste(choice.arrow,"_arrow",sep = ""))
}
send.func = function(prepped.choice){
remDr$sendKeysToActiveElement(list(key = prepped.choice))
}
comb.move = function(arrow){
return(send.func(prep.to.send(arrow)))
}
#### Section III: functions to determine properties of boards ####
tiles.in.fourth = function(board){
sum(!is.na(board[,4]))
}
tot.sum.in.fourth = function(board){
sum(board[,4],na.rm = TRUE)
}
bottom.right.val = function(board){
return(sum(board[4,4],na.rm = TRUE))
}
bottom.right.third.val = function(board){
return(sum(board[3,4],na.rm = TRUE))
}
bottom.right.sec.val = function(board){
return(sum(board[2,4],na.rm = TRUE))
}
bottom.right.first.val = function(board){
return(sum(board[1,4],na.rm = TRUE))
}
prep.for.next = function(board){
sum(board[,3] == board[,4],na.rm = TRUE)
}
prep.for.next.third = function(board){
sum(board[,2] == board[,3],na.rm = TRUE)
}
prep.for.next.second = function(board){
sum(board[,1] == board[,2],na.rm = TRUE)
}
#### SECTION IV: scoring boards ####
top.val.moves = function(score.vec){
raw.scores = score.vec
temp.max = max(raw.scores)
indx = which(raw.scores == temp.max)
maxima = names(raw.scores)[indx]
return(maxima)
}
score.em = function(legal.board, FUN){
return(unlist(lapply(legal.board,FUN)))
}
#### SECTION V: algorithm for a single play ####
play.func = function(parsed){
legal.boards = legal.sub(parsed)
bottom.right = score.em(legal.boards, bottom.right.val)
leftover.moves = top.val.moves(bottom.right)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.third = score.em(leftover.boards, bottom.right.third.val)
leftover.moves = top.val.moves(bottom.right.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
bottom.right.sec = score.em(leftover.boards, bottom.right.sec.val)
leftover.moves = top.val.moves(bottom.right.sec)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tot.fourth.scores = score.em(leftover.boards, tot.sum.in.fourth)
leftover.moves = top.val.moves(tot.fourth.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores = score.em(leftover.boards, prep.for.next)
leftover.moves = top.val.moves(prep.scores)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
tile.tots = score.em(leftover.boards, function(x){20 - count.tiles(x)})
leftover.moves = top.val.moves(tile.tots)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.third = score.em(leftover.boards, prep.for.next.third)
leftover.moves = top.val.moves(prep.scores.third)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
prep.scores.second = score.em(leftover.boards, prep.for.next.second)
leftover.moves = top.val.moves(prep.scores.second)
leftover.boards = legal.boards[leftover.moves]
if(length(leftover.boards) == 1){
return(comb.move(names(leftover.boards)))}
rand.choice = leftover.moves[sample(1:length(leftover.boards),1)]
return(comb.move(rand.choice))
}
execute = function(){
temp = read_html(remDr$getPageSource()[[1]])
play.func(temp)
}
#### SECTION VI Playing the game ####
grand.play = function(){
remDr$navigate("http://gabrielecirulli.github.io/2048/")
temp2 = rep("Continue",2)
while(temp2[2] != "Game over!"){
temp = read_html(remDr$getPageSource()[[1]])
execute()
temp2 = html_nodes(temp, xpath = "//p") %>% html_text()
curr.score = as.numeric(strsplit(html_text(html_nodes(temp, xpath = "//div[@class='score-container']")),split = "\\+")[[1]][1])
}
return(curr.score)
}
# example:
grand.play()
## peparations -------------------
source("packages.r")
## overview
browseURL("http://ropensci.org/")
browseURL("https://github.com/ropensci/opendata")
# API documentation
browseURL("http://ip-api.com/")
# ipapi package
#devtools::install_github("hrbrmstr/ipapi")
library(ipapi)
# function call
ip_df <- geolocate(c(NA, "", "10.0.1.1", "72.33.67.89", "www.nytimes.com", "search.twitter.com"), .progress = TRUE)
View(ip_df)
# API documentation
browseURL("http://ip-api.com/docs/")
# manual API call, XML data
url <- "http://ip-api.com/xml/"
ip_parsed <- xml2::read_xml(url)
ip_list <- as_list(ip_parsed)
ip_list %>% unlist %>% t %>% as.data.frame(stringsAsFactors = FALSE)
dat <- ip_list %>% unlist %>% t %>% as.data.frame(stringsAsFactors = FALSE)
names(dat) <- str_replace(names(dat), "query.", "")
# manual API call, XML data
url <- "http://ip-api.com/xml/"
ip_parsed <- xml2::read_xml(url)
ip_list <- as_list(ip_parsed)
ip_list
as.data.frame(ip_list)
ip_list %>% unlist %>% t %>% as.data.frame(stringsAsFactors = FALSE)
dat <- ip_list %>% unlist %>% t %>% as.data.frame(stringsAsFactors = FALSE)
dat
# manual API call, XML data
url <- "http://ip-api.com/xml/"
ip_parsed <- xml2::read_xml(url)
ip_parsed
as_list(ip_parsed)
?as_list
ip_df <- as_list(ip_parsed) %>% as.data.frame(stringsAsFactors = FALSE)
ip_df
names(ip_df)
ip_list <- as_list(ip_parsed)
ip_list %>% unlist %>% t %>% as.data.frame(stringsAsFactors = FALSE)
ip_parsed
names(ip_parsed)
xml_name(ip_parsed)
xml_nodes(ip_parsed, "/query/*")
xml_nodes(ip_parsed, "query/*")
xml_nodes(ip_parsed, "query/child::*")
xml_nodes(ip_parsed, "//query/child::*")
xml_nodes(ip_parsed, xpath = "//query/child::*")
xml_nodes(ip_parsed, xpath = "//query/child::*") %>% xml_name()
var_names <- xml_nodes(ip_parsed, xpath = "//query/child::*") %>% xml_name()
ip_df <- as_list(ip_parsed) %>% as.data.frame(stringsAsFactors = FALSE)
ip_df
names(ip_df) <- var_names
ip_df
# modify call
fromJSON("http://ip-api.com/json/72.33.67.89") %>% as.data.frame(stringsAsFactors = FALSE)
fromJSON("http://ip-api.com/json/www.nytimes.com") %>% as.data.frame(stringsAsFactors = FALSE)
# build function
ipapi_grabber <- function(ip = "") {
dat <- fromJSON(paste0("http://ip-api.com/json/", ip)) %>% as.data.frame(stringsAsFactors = FALSE)
dat
}
ipapi_grabber("193.17.243.1")
# documentation
browseURL("https://wikimedia.org/api/rest_v1/#/Pageviews%20data")
# Streaming APIs --> low latency access to 1% of global stream - public, user and site streams
browseURL("https://dev.twitter.com/streaming/overview")
browseURL("https://dev.twitter.com/streaming/overview/request-parameters")
library(rtweet)
?stream_tweets
?search_tweets
## name assigned to created app
appname <- "TwitterToR" # <--- add your Twitter App name here!
## api key (example below is not a real key)
load("/Users/simonmunzert/twitterkeys.RDa") # <--- adapt path here; see above!
## register app
twitter_token <- create_token(
app = appname,
consumer_key = TwitterToR_twitterkey,
consumer_secret = TwitterToR_twittersecret,
access_token = TwitterToR_accesstoken,
access_secret = TwitterToR_accesssecret,
set_renv = FALSE)
## check if everything worked
rt <- search_tweets("merkel", n = 200, token = twitter_token)
View(rt)
# some advice for search:
browseURL("https://developer.twitter.com/en/docs/tweets/search/guides/standard-operators")
# set keywords used to filter tweets
q <- paste0("merkel,trump,macron")
# parse directly into data frame
twitter_stream <- stream_tweets(q = q, timeout = 30, token = twitter_token)
# add User-Agent string
url <- "http://spiegel.de/schlagzeilen"
source("packages.r")
browseURL("http://www.whoishostingthis.com/tools/user-agent/")
uastring <- "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36"
session <- html_session(url, user_agent(uastring))
# add header fields with rvest + httr
session <- html_session(url, add_headers(From = "my@email.com", User-Agent = "R Scraper"))
# add header fields with rvest + httr
session <- html_session(url, add_headers(From = "my@email.com", `User-Agent` = "R Scraper"))
headlines <- session %>% html_nodes(".schlagzeilen-headline") %>%  html_text()
headlines
?html_session
Terminal):
system("launchctl load ~/Library/LaunchAgents/spiegelheadlines.plist")
system("launchctl start spiegelheadlines")
system("launchctl list")
#!/usr/local/bin/Rscript
library(stringr)
library(magrittr)
library(httr)
setwd("/Users/simonmunzert/GitHub/rscraping-luzern-2019")
url <- "http://www.spiegel.de/schlagzeilen/"
url_out <- GET(url, add_headers(from = "eddie@datacollection.com"))
datetime <- str_replace_all(Sys.time(), "[ :]", "-")
content(url_out, as = "text") %>% write(file = str_c("data/spiegelHeadlines/headlines-spiegel-", datetime, ".html"))
# 1. create script (e.g., "spiegel_scraper.R")
# 2. add "#!/usr/local/bin/Rscript" to the top of the script
# 3. create plist file
# 4. load plist file into launchd scheduler and start it (via Terminal):
system("launchctl load ~/Library/LaunchAgents/spiegelheadlines.plist")
system("launchctl start spiegelheadlines")
system("launchctl list")
# 5. stop and unload it when desired
system("launchctl stop spiegelheadlines")
system("launchctl unload ~/Library/LaunchAgents/spiegelheadlines.plist")
# 1. create script (e.g., "spiegel_scraper.R")
# 2. add "#!/usr/local/bin/Rscript" to the top of the script
# 3. create plist file
# 4. load plist file into launchd scheduler and start it (via Terminal):
system("launchctl load ~/Library/LaunchAgents/spiegelheadlines.plist")
system("launchctl start spiegelheadlines")
system("launchctl list")
system("launchctl stop spiegelheadlines")
system("launchctl unload ~/Library/LaunchAgents/spiegelheadlines.plist")
# 1. create script (e.g., "spiegel_scraper.R")
# 2. add "#!/usr/local/bin/Rscript" to the top of the script
# 3. create plist file
# 4. load plist file into launchd scheduler and start it (via Terminal):
system("launchctl load ~/Library/LaunchAgents/spiegelheadlines.plist")
system("launchctl start spiegelheadlines")
system("launchctl list")
# 5. stop and unload it when desired
system("launchctl stop spiegelheadlines")
system("launchctl unload ~/Library/LaunchAgents/spiegelheadlines.plist")
# 4. load plist file into launchd scheduler and start it (via Terminal):
system("launchctl load ~/Library/LaunchAgents/spiegelheadlines.plist")
system("launchctl start spiegelheadlines")
system("launchctl list")
# 5. stop and unload it when desired
system("launchctl stop spiegelheadlines")
system("launchctl unload ~/Library/LaunchAgents/spiegelheadlines.plist")
